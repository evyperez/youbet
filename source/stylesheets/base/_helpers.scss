// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/* CLASSES
============================================================================ */
%loading-bg {
  background-image: image('loading.svg');
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-color: palette('loading', 'background');
}

%loading-el {
  overflow: hidden;

  cursor: wait;

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    z-index: layer('modal');

    content: '';
  }
}

/// Content which loads **after** the page does, should be informed to user.
///
/// `[aria-busy='true']` adds a loading background to any loading element
/// which can't be a parent and a pseudo element over any element other than
/// `html`.
///
/// Don't forget to customize it to your needs. Speacially the background
/// color.
///
/// Already applied to `embed` and `img`, which can cause issues with
/// transparent images.
///
/// @author Sobral
/// @group helpers
///
/// @example html
///
/// <dialog open aria-busy="true">
/// 	<form method="dialog">
/// 		[...]
/// 	</form>
/// </dialog>
///
[aria-busy='true'] {
  > body,
  &:not(html) {
    @extend %loading-bg;
    @extend %loading-el;
  }
}

// img:not([src$='.png']):not([src$='.gif']),
// embed {
//   @extend %loading-bg;

//   background-size: auto;

//   &::after {
//     /*
// 		 *	Future proof reset
// 		 */
//     content: none;
//   }
// }

input,
output,
keygen,
textarea {
  &[aria-busy='true'] {
    @extend %loading-bg;

    background-size: auto;
  }
}

/// Load grid image background under the class `grid`
///
/// @author Sobral
/// @group helpers
///
/// @example html
/// <html class="grid">
/// 	<body>
/// 		[...]
/// 	</body>
/// </html>
///
.grid {
  $n: $_mobile-columns - 1;

  &::after,
  &:root::before {
    position: fixed;
    top: 0;
    right: 0;

    z-index: layer('modal');

    font-size: 1rem;

    pointer-events: none;

    content: 'breakpoint: phone';
  }

  &::after {
    background-image: grid-image($n);
    background-position: center top;

    content: '';
  }

  &:root::before {
    padding: $gutter;

    background-color: palette('debug');

    content: 'breakpoint: #{$n}col';

    opacity: 0.75;
  }

  @each $key, $value in $breakpoints {
    $n: $n + 1;

    @if map-get($toggle-breakpoints, $key) ==null {
      @media screen and (min-width: breakpoint($key)) {
        &::after {
          background-image: grid-image($n);
        }

        &:root::before {
          content: 'breakpoint: #{$key}';
        }
      }
    }
  }

  @media screen and (min-width: $max-width) {
    &::after {
      background-size: $max-width 100%;
    }
  }
}

.one-column {
  display: grid;

  grid-template-rows: auto;

  width: 100%;

  row-gap: to-rem(24px);
}

.two-columns {
  display: grid;
  /* stylelint-disable-next-line property-no-unknown */

  grid-template-rows: auto;

  width: 100%;

  row-gap: to-rem(24px);

  @media screen and (min-width: breakpoint('tablet__portrait')) {
    grid-template-columns: 1fr 1fr;

    column-gap: to-rem(24px);

    row-gap: to-rem(32px);
  }
}

.three-columns {
  display: grid;
  /* stylelint-disable-next-line property-no-unknown */

  grid-template-rows: auto;

  width: 100%;

  row-gap: to-rem(24px);

  @media screen and (min-width: breakpoint('tablet__portrait')) {
    grid-template-columns: 1fr 1fr;

    column-gap: to-rem(24px);

    row-gap: to-rem(32px);
  }

  @media screen and (min-width: breakpoint('desktop')) {
    grid-template-columns: 1fr 1fr 1fr;

    column-gap: to-rem(24px);

    row-gap: to-rem(32px);
  }
}

.four-columns {
  display: grid;
  /* stylelint-disable-next-line property-no-unknown */

  grid-template-rows: auto;

  width: 100%;

  row-gap: to-rem(24px);

  @media screen and (min-width: breakpoint('tablet__portrait')) {
    grid-template-columns: 1fr 1fr;

    column-gap: to-rem(24px);

    row-gap: to-rem(32px);
  }

  @media screen and (min-width: breakpoint('desktop')) {
    grid-template-columns: 1fr 1fr 1fr 1fr;

    column-gap: to-rem(24px);

    row-gap: to-rem(32px);
  }
}

.color-white {
  color: palette('white');
}

.align-items--center {
  align-items: center;
}

.text-decoration--none {
  text-decoration: none;
}
