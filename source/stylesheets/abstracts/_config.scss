////
/// This file contains all application-wide Sass configuration variables
/// @group configurations
/// @todo Customize to match your design needs.
////

/// Title font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $title-font-stack: ComicSans, $basic-title-font-stack;
$title-font-stack: $basic-title-font-stack !default;

/// Text body font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $text-font-stack: ComicSans, $native-font-stack;
$text-font-stack: $native-font-stack !default;

/// Code (monospace) font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $code-font-stack: ComicSans, $basic-code-font-stack;
$code-font-stack: $basic-code-font-stack !default;

/// Font weights map
/// @access private
/// @prop {string} weight - Pure colors or a map of tones
/// @require {function} font-weight
/// @todo Customize the weights or add new ones to match your design needs.
/// @type Map
$font-weights: (
  'normal': 400,
  'bold': 700,
  'extrabold': 800,
  'heavy': 900,
);

/// Body text font-size
///
/// @access public
/// @type number
$body-font-size: 1em !default;

/// Default Leading
///
/// @access public
/// @type number
$leading: 1.5 !default;

/// flexible line heights map
/// @access private
/// @type Map
/// @prop {number} min - minimum line height expressed unitless
/// @prop {number} max - maximum line height expressed unitless
$leadings: (
  'min': 1.15,
  'max': 1.5,
) !default;

/// flexible line length map
///
/// @type Map
/// @prop {number} min - minimum line length expressed in `em`
/// @prop {number} max - maximum line length expressed in `em`
$line-lengths: (
  'min': 21em,
  'max': 35em,
) !default;

///
/// @link http://www.modularscale.com/?1&rem&1.25
$modularscale: (
  base: 1rem,
  ratio: 1.25,
);

/// List all available colors and tones.
///
/// @access private
/// @prop {string} color - Pure colors or a map of tones
/// @prop {color | map} color.tone - Pure colors or returned color value of functions
/// @require {function} palette
/// @todo Customize the colors or add new ones to match your design needs.
$palette: (
  'blue': (
    '110': #0038da,
    'base': #004ff7,
    '80%': #3171f7,
    '60%': #6392f7,
    '30%': #c6d5f7,
    '10%': #dee6f7,
  ),
  'yellow': (
    '110%': #d88e00,
    'base': #f7a800,
    '80%': #f7b831,
    '60%': #f7c863,
    '30%': #f7e7c6,
    '10%': #f7efde,
  ),
  'gray': (
    '110%': #141414,
    'base': #333333,
    '80%': #616161,
    '60%': #949494,
    '30%': #cacaca,
    '10%': #e6e6e6,
  ),
  'menu-dark': (
    'base': #141414,
    'text': #cacaca,
    'border': #333333,
    'sub-menu': #1d1d1d,
    'sub-menu-text': #cacaca,
    'sub-menu-hover': #333333,
    'anchor': #f7a800,
  ),
  'menu-light': (
    'base': #ffffff,
    'text': #141414,
    'border': #e6e6e6,
    'sub-menu': #f1f1f1,
    'sub-menu-text': #1d1d1d,
    'sub-menu-hover': #333333,
    'anchor': #f7a800,
  ),
  'footer-dark': (
    'base': #141414,
    'text': #cacaca,
    'border': #333333,
    'anchor': #f7a800,
  ),
  'footer-light': (
    'base': #ffffff,
    'text': #141414,
    'border': #e6e6e6,
    'anchor': #f7a800,
  ),
  'white': rgb(255, 255, 255),
  'black': rgb(0, 0, 0),
  'debug': rgb(255, 0, 0),
  'warning': rgb(255, 190, 0),
  'anchor': (
    'base': rgb(0, 102, 204),
    'link': rgb(0, 102, 204),
    'visited': rgb(128, 0, 128),
    'hover': rgb(50, 152, 255),
    'focus': rgb(50, 152, 255),
    'active': rgb(229, 0, 80),
  ),
  'border': (
    'base': rgb(192, 192, 192),
    'focus': rgb(0, 0, 0),
  ),
  'button': (
    'base': rgb(225, 225, 225),
    'focus': rgb(229, 241, 251),
    'slider': hsl(0, 0%, 40%),
    'submit': rgb(217, 83, 79),
    'reset': transparent,
  ),
  'disabled': (
    'foreground': hsl(0, 0%, 42%),
    'background': hsl(0, 0%, 94%),
  ),
  'loading': (
    'foreground': hsl(0, 0%, 94%),
    'background': hsla(0, 0%, 7%, 0.8),
  ),
  'label': (
    'default': rgb(119, 119, 119),
    'primary': rgb(51, 122, 183),
    'success': rgb(66, 133, 66),
    'info': rgb(60, 127, 145),
    'warning': rgb(240, 173, 78),
    'danger': rgb(217, 83, 79),
  ),
  'mark': (
    'foreground': rgb(51, 51, 51),
    'background': rgb(215, 255, 90),
  ),
  'placeholder': (
    'base': hsl(0, 0%, 34%),
    'focus': hsl(0, 0%, 56%),
  ),
  'quotes': hsl(0, 0%, 34%),
  'selection': (
    'foreground': rgb(255, 255, 255),
    'background': rgb(20, 105, 140),
  ),
  'tap-highlight': rgb(255, 94, 153),
  'target-highlight': rgb(255, 255, 102),
  'background': (
    'dark': rgb(20, 20, 20),
    'light': rgb(252, 252, 252),
  ),
  'text': (
    'dark': hsl(0, 0%, 13%),
    'light': rgb(229, 231, 234),
  ),
  'text-dark': (
    'base': rgb(229, 231, 234),
  ),
  'text-light': (
    'base': hsl(0, 0%, 13%),
  ),
  'menu': (
    'shadow': rgba(0, 0, 0, 0.74),
  ),
  'shadow': (
    'inverse': rgba(255, 255, 255, 0.25),
    'base': rgba(0, 0, 0, 0.2),
  ),
  'carousel': (
    'tag-background': rgba(0, 0, 0, 0.6),
  ),
);

/// Default border-radius
/// @todo Customize it to match your design.
/// @type number
$rounded-corner: 0 !default;

/// border default width
/// @todo Customize it to match your design.
/// @type number
$stroke: 1px !default;

/// gutter default width
/// @todo Customize it to match your design.
/// @type number
$gutter: $leading * $body-font-size / 1em * 1rem;

/// column basis width
/// @todo Customize it to match your design.
/// @type number
$column-basis: 17rem;

$_mobile-columns: 2;
$_new-width: 0;
$_device-width: 20em;
$_i: $_mobile-columns;

@function _im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $em-value: ($value / $base-value) * 1em;
    $new-breakpoints: map-merge(
      $new-breakpoints,
      (
        $name: $em-value,
      )
    );
  }

  @return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: _im-to-em(
  (
    'phone__portrait': 320px,
    'phone__landscape': 480px,
    'tablet__portrait': 768px,
    'tablet__landscape': 1280px,
    'max-desktop': 1023px,
    'desktop': 1024px,
    'max-wide': 1599px,
    'wide': 1600px,
  )
) !default;

$toggle-breakpoints: (
  'toggle-table-layout': 48em,
  'toggle-menu': 64em,
);

$off-canvas-menu-width: 15em;

$breakpoints: map-merge($breakpoints, $toggle-breakpoints);

// 320
// 480
// 760
// 960
// 1200
// 1600.

/// Container's maximum width
/// @type number
$max-width: 80em !default; // 1180px
$max-width--narrow: 40.75em; // 668 px

$breakpoints: map-merge(
  $breakpoints,
  (
    '#{$_mobile-columns}col': $_device-width,
  )
);

@while $_device-width <= $max-width {
  $_device-width: $_device-width / $_i * ($_i + 1);
  $_i: $_i + 1;
  $breakpoints: map-merge(
    $breakpoints,
    (
      '#{$_i}col': $_device-width,
    )
  );
}

/// Z-indexes map, gathering all Z layers of the application. Avoid to edit it.
/// @access public
/// @type Map
$layers: (
  'modal': 5000,
  'dropdown': 4000,
  'default': 1,
  'below': -1,
);

/// Relative or absolute URL where all assets are served from.
/// @todo Customize it to match your setup.
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;

@function _im-to-px($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
    $new-breakpoints: map-merge(
      $new-breakpoints,
      (
        $name: $px-value,
      )
    );

    @if (unit($value) != 'em' and unit($value) != 'px') {
      @error 'all media queries units should be either `em` or `px`. `#{unit($value)}` given.';
    } @else {
      $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
      $new-breakpoints: map-merge(
        $new-breakpoints,
        (
          $name: $px-value,
        )
      );
    }
  }

  @return $new-breakpoints;
}

@if variable-exists('im-media-support') and $im-media-support == false {
  $breakpoints: _im-to-px($breakpoints);
  $max-width: $max-width / 1em * 16px;
}
