////
/// This file contains all application-wide Sass configuration variables
/// @group configurations
/// @todo Customize to match your design needs.
////

/// Title font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss

/// $title-font-stack: ComicSans, $basic-title-font-stack;
$title-font-stack: $basic-title-font-stack !default;

/// Text body font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $text-font-stack: ComicSans, $native-font-stack;
$text-font-stack: $native-font-stack !default;

/// Code (monospace) font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $code-font-stack: ComicSans, $basic-code-font-stack;
$code-font-stack: $basic-code-font-stack !default;

/// Font weights map
/// @access private
/// @prop {string} weight - Pure colors or a map of tones
/// @require {function} font-weight
/// @todo Customize the weights or add new ones to match your design needs.
/// @type Map
$font-weights: (
  'normal': 400,
  'bold': 700,
  'extrabold': 800,
  'heavy': 900,
);

/// Body text font-size
///
/// @access public
/// @type number
$body-font-size: 1em !default;

/// Default Leading
///
/// @access public
/// @type number
$leading: 1.5 !default;

$spacement: 0.5rem !default;

/// flexible line heights map
/// @access private
/// @type Map
/// @prop {number} min - minimum line height expressed unitless
/// @prop {number} max - maximum line height expressed unitless
$leadings: (
  'min': 1.15,
  'max': 1.5,
) !default;

/// flexible line length map
///
/// @type Map
/// @prop {number} min - minimum line length expressed in `em`
/// @prop {number} max - maximum line length expressed in `em`
$line-lengths: (
  'min': 21em,
  'max': 35em,
) !default;

///
/// @link http://www.modularscale.com/?1&rem&1.25

$modularscale: (
  base: 1rem,
  ratio: 1.2,
);

/// List all available colors and tones.
///
/// @access private
/// @prop {string} color - Pure colors or a map of tones
/// @prop {color | map} color.tone - Pure colors or returned color value of functions
/// @require {function} palette
/// @todo Customize the colors or add new ones to match your design needs.
$palette: (
  'orange': (
    '110%': rgb(222, 151, 0),
    'base': rgb(247, 168, 0),
    '80%': rgb(249, 185, 51),
    '60%': rgb(250, 203, 102),
    '30%': rgb(253, 229, 178),
    '10%': rgb(254, 246, 229),
    '5%': rgb(255, 251, 242),
  ),
  'blue': (
    '110': rgb(0, 71, 222),
    'base': rgb(0, 79, 247),
    '80%': rgb(51, 114, 249),
    '60%': rgb(102, 149, 250),
    '30%': rgb(178, 202, 253),
    '10%': rgb(229, 237, 254),
    '5%': rgb(242, 246, 255),
  ),
  'gray': (
    '110%': rgb(46, 46, 46),
    'base': rgb(51, 51, 51),
    '80%': rgb(92, 92, 92),
    '60%': rgb(133, 133, 133),
    '30%': rgb(194, 194, 194),
    '10%': rgb(235, 235, 235),
    '5%': rgb(245, 245, 245),
  ),
  'white': (
    'base': rgb(255, 255, 255),
  ),
  'black': rgb(0, 0, 0),
  'anchor': (
    'base': rgb(51, 51, 51),
    'link': rgb(51, 51, 51),
    'visited': rgb(51, 51, 51),
    'hover': rgb(222, 151, 0),
    'focus': rgb(249, 185, 51),
    'active': rgb(222, 151, 0),
  ),
  'anchor-dark': (
    'base': rgb(253, 229, 178),
    'link': rgb(253, 229, 178),
    'visited': rgb(253, 229, 178),
    'hover': rgb(253, 229, 178),
    'focus': rgb(253, 229, 178),
    'active': rgb(253, 229, 178),
  ),
  'menu': (
    'base': rgb(255, 255, 255),
    'text': rgb(20, 20, 20),
    'border': rgb(230, 230, 230),
    'sub-menu': rgb(241, 241, 241),
    'sub-menu-text': rgb(29, 29, 29),
    'sub-menu-hover': rgb(51, 51, 51),
    'anchor': rgb(247, 168, 0),
    'shadow': rgba(0, 0, 0, 0.74),
  ),
  'menu-dark': (
    'base': rgb(20, 20, 20),
    'text': rgb(202, 202, 202),
    'border': rgb(51, 51, 51),
    'sub-menu': rgb(29, 29, 29),
    'sub-menu-text': rgb(202, 202, 202),
    'sub-menu-hover': rgb(51, 51, 51),
    'anchor': rgb(247, 168, 0),
  ),
  'footer': (
    'base': rgb(255, 255, 255),
    'text': rgb(20, 20, 20),
    'border': rgb(230, 230, 230),
    'anchor': rgb(247, 168, 0),
  ),
  'footer-dark': (
    'base': rgb(20, 20, 20),
    'text': rgb(202, 202, 202),
    'border': rgb(51, 51, 51),
    'anchor': rgb(247, 168, 0),
  ),
  'debug': rgb(255, 0, 0),
  'warning': rgb(255, 190, 0),
  'border': (
    'base': rgb(192, 192, 192),
    'focus': rgb(0, 0, 0),
  ),
  'button': (
    'base': rgba(247, 168, 0, 1),
    'dark': rgba(222, 151, 0, 1),
    'light': rgba(250, 203, 102, 1),
    'disabled': rgb(254, 246, 229),
  ),
  'button-secondary': (
    'base': rgba(0, 79, 247, 1),
    'dark': rgba(0, 71, 222, 1),
    'light': rgba(102, 149, 250, 1),
    'disabled': rgba(229, 237, 254, 1),
  ),
  'button-neutral': (
    'base': rgba(51, 51, 51, 1),
    'dark': rgba(46, 46, 46, 1),
    'light': rgba(255, 254, 252, 1),
    'disabled': rgba(133, 133, 133, 1),
  ),
  'transparent': (
    'base': rgba(255, 255, 255, 0),
    'white': rgba(255, 255, 255, 0.2),
  ),
  'disabled': (
    'foreground': hsl(0, 0%, 42%),
    'background': hsl(0, 0%, 94%),
  ),
  'loading': (
    'foreground': hsl(0, 0%, 94%),
    'background': hsla(0, 0%, 7%, 0.8),
  ),
  'label': (
    'default': rgb(57, 59, 65),
    'selected': rgb(80, 159, 239),
    'info': rgb(60, 127, 145),
    'success': rgb(10, 200, 180),
    'warning': rgb(255, 176, 40),
    'danger': rgb(255, 75, 99),
  ),
  'form': (
    'background': rgb(255, 255, 255),
    'border': rgb(215, 216, 217),
    'disabled': rgb(235, 235, 236),
    'text': rgb(57, 59, 65),
    'placefolder': rgb(136, 137, 141),
  ),
  'mark': (
    'foreground': rgb(51, 51, 51),
    'background': rgb(215, 255, 90),
  ),
  'placeholder': (
    'base': hsl(0, 0%, 34%),
    'focus': hsl(0, 0%, 56%),
  ),
  'quotes': hsl(0, 0%, 34%),
  'selection': (
    'foreground': rgb(255, 255, 255),
    'background': rgb(20, 105, 140),
  ),
  'tap-highlight': rgb(255, 94, 153),
  'target-highlight': rgb(255, 255, 102),
  'background': (
    'dark': rgb(20, 20, 20),
    'light': rgb(252, 252, 252),
  ),
  'text': (
    'dark': hsl(0, 0%, 13%),
    'light': rgb(229, 231, 234),
  ),
  'text-dark': (
    'base': rgb(229, 231, 234),
  ),
  'shadow': (
    'inverse': rgba(255, 255, 255, 0.25),
    'base': rgba(0, 0, 0, 0.2),
  ),
  'carousel': (
    'tag-background': rgba(0, 0, 0, 0.6),
  ),
);

/// Default border-radius
/// @todo Customize it to match your design.
/// @type number
$rounded-corner: 8px !default;
$rounded-corner-s: 4px !default;

/// border default width
/// @todo Customize it to match your design.
/// @type number
$stroke: 1px !default;

/// gutter default width
/// @todo Customize it to match your design.
/// @type number
$small-gutter: 1rem; // 16px
$gutter: 1.5rem; // 24px

/// column basis width
/// @todo Customize it to match your design.
/// @type number
$column-basis: 17rem;

$_mobile-columns: 6;
$_new-width: 0;
$_device-width: 20em;
$_i: $_mobile-columns;

@function _im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $em-value: ($value / $base-value) * 1em;
    $new-breakpoints: map-merge(
      $new-breakpoints,
      (
        $name: $em-value,
      )
    );
  }

  @return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: _im-to-em(
  (
    'small-phone': 320px,
    'phone': 414px,
    'tablet': 768px,
    'laptop': 1024px,
    'desktop': 1440px,
    'max-tablet': 768px,
    'max-laptop': 1023px,
    'max-desktop': 1439px,
  )
) !default;

$toggle-breakpoints: (
  'toggle-table-layout': 48em,
  'toggle-menu': 64em,
);

$off-canvas-menu-width: 15em;

$breakpoints: map-merge($breakpoints, $toggle-breakpoints);

// 320
// 480
// 760
// 960
// 1200
// 1600.

/// Container's maximum width
/// @type number
$max-width: 60.125em !default; // 1128px + gutter
$max-width--desktop: 70.5em !default; // 1128 + gutter
$max-width--narrow: 40.75em; // 668 px

$breakpoints: map-merge(
  $breakpoints,
  (
    '#{$_mobile-columns}col': $_device-width,
  )
);

@while $_device-width <= $max-width {
  $_device-width: $_device-width / $_i * ($_i + 1);
  $_i: $_i + 1;
  $breakpoints: map-merge(
    $breakpoints,
    (
      '#{$_i}col': $_device-width,
    )
  );
}

/// Z-indexes map, gathering all Z layers of the application. Avoid to edit it.
/// @access public
/// @type Map
$layers: (
  'modal': 5000,
  'dropdown': 4000,
  'default': 1,
  'below': -1,
);

/// Relative or absolute URL where all assets are served from.
/// @todo Customize it to match your setup.
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;

@function _im-to-px($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
    $new-breakpoints: map-merge(
      $new-breakpoints,
      (
        $name: $px-value,
      )
    );

    @if (unit($value) != 'em' and unit($value) != 'px') {
      @error 'all media queries units should be either `em` or `px`. `#{unit($value)}` given.';
    } @else {
      $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
      $new-breakpoints: map-merge(
        $new-breakpoints,
        (
          $name: $px-value,
        )
      );
    }
  }

  @return $new-breakpoints;
}

@if variable-exists('im-media-support') and $im-media-support == false {
  $breakpoints: _im-to-px($breakpoints);
  $max-width: $max-width / 1em * 16px;
}
